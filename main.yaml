---
- name: Deploy cassandra
  hosts: cassandra_nodes
  become: true
  vars:
    version: "apache-cassandra-5.0.2"
    # version: "apache-cassandra-5.0.2-bin.tar"
    cassandra_user: cassandra
    cassandra_group: cassandra
    cluster_name: LAB
    python: python3.11
    num_tokens: 8
  tasks:
    - name: Create cassandra group
      ansible.builtin.group:
        name: "{{ cassandra_group }}"
        state: present
    - name: Create cassandra user
      ansible.builtin.user:
        name: "{{ cassandra_user }}"
        group: "{{ cassandra_group }}"
        state: present
        createhome: true
    - name: Deliver tar file
      ansible.builtin.copy:
        src: "{{ version }}-bin.tar"
        dest: /tmp/
        mode: "0664"
        owner: "{{ cassandra_user }}"
        group: "{{ cassandra_group }}"
    - name: Untar archive
      ansible.builtin.unarchive:
        src: "/tmp/{{ version }}-bin.tar"
        dest: /var/lib/
        remote_src: true
        owner: "{{ cassandra_user }}"
        group: "{{ cassandra_group }}"
    - name: Install openjdk
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - java-17-openjdk
        - "{{ python }}"
        - python3-pip
        - uv
        - python-devel
        - gcc
      # notify: Restart cassandra
    - name: Create simlink
      ansible.builtin.file:
        src: "{{ item }}"
        dest: /var/lib/cassandra
        state: link
        owner: "root"
        group: "root"
      loop:
        - "/var/lib/{{ version }}"
        #- "/root/cassandra" 
    - name: Run various commands
      ansible.builtin.command: "{{ item }}"
      loop:
        # - "alternatives --install /usr/bin/python python /usr/bin/{{ python }} 2"
        # - "alternatives --install /usr/bin/python3 python3 /usr/bin/{{ python }} 2"
        - "uv pip install cassandra-driver --system"
        - "restorecon -R -v /var/lib/cassandra/bin/cassandra"
        - "chcon -R -t bin_t /var/lib/cassandra/bin/cassandra"
    - name: Create data directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ cassandra_user }}"
        group: "{{ cassandra_group }}"
      loop:
        - "/var/lib/cassandra/logs"
        - "/var/lib/cassandra/data"
    - name: Change configuration, change value
      ansible.builtin.lineinfile:
        path: /var/lib/cassandra/conf/cassandra.yaml
        regexp: "{{ item.regex }}"
        line: "{{ item.value }}"
        backrefs: true
      loop:
        - regex: '^(cluster_name:).*'
          value: \g<1> '{{ cluster_name }}'
        - regex: '^(num_tokens: ).*'
          value: '\g<1>{{ num_tokens }}'
        - regex: '^(listen_address:).*'
          value: '# \g<1>'
        - regex: '^(rpc_address:).*'
          value: '# \g<1>'
        - regex: '^# *(listen_interface:).*'
          value: '\g<1> enp0s31f6'
        - regex: '^# *(rpc_interface:).*'
          value: '\g<1> enp0s31f6'
        - regex: '(^ *- seeds:).*'
          value: '\g<1> "192.168.70.11,192.168.70.14"'
        - regex: '^(endpoint_snitch: ).*'
          value: '\g<1> GossipingPropertyFileSnitch'
        - regex: '^diagnostic_events_enabled:.*'
          value: 'diagnostic_events_enabled: true'
      notify: Restart cassandra
    - name: Change snitch configuration
      ansible.builtin.lineinfile:
        path: /var/lib/cassandra/conf/cassandra-rackdc.properties
        regexp: "{{ item.regex }}"
        line: "{{ item.value }}"
        backrefs: true
      loop:
        - regex: 'dc=.*'
          value: 'dc=pl'
        - regex: 'rack=.*'
          value: 'rack=marsa'
    - name: Append to configuration
      ansible.builtin.lineinfile:
        path: /var/lib/cassandra/conf/cassandra-env.sh
        line: "{{ item }}"
        state: "present"
        create: true
        owner: "{{ cassandra_user }}"
        group: "{{ cassandra_group }}"
      loop:
        - JVM_OPTS="$JVM_OPTS --add-exports jdk.jconsole/sun.tools.jconsole=ALL-UNNAMED -Djava.security.manager=allow"

#JVM_OPTS="$JVM_OPTS --add-opens=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED"
#JVM_OPTS="$JVM_OPTS --add-exports=java.management/com.sun.jmx.interceptor=ALL-UNNAMED"
#JVM_OPTS="$JVM_OPTS --add-exports java.management/com.sun.jmx.mbeanserve=ALL-UNNAMED"
#JVM_OPTS="$JVM_OPTS -javaagent:$CASSANDRA_HOME/lib/cassandra-exporter-agent-0.9.14.jar"
#JVM_OPTS="$JVM_OPTS -Dcassandra.metricsReporterConfigFile=$CASSANDRA_HOME/conf/metrics-reporter-config.yaml"
    - name: Copy service file
      ansible.builtin.copy:
        src: cassandra.service
        dest: /etc/systemd/system/cassandra.service
        mode: "0644"
        owner: root
        group: root
    - name: Reload services
      ansible.builtin.systemd:
        name: "cassandra.service"
        enabled: true
        no_block: true
        state: "started"
        daemon_reload: true
      delegate_to: "{{ item }}"
      with_items: "{{ groups['cassandra_nodes'] }}"
      run_once: true
  handlers:
    - name: Restart cassandra
      ansible.builtin.systemd:
        name: "cassandra.service"
        state: "started"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['cassandra_nodes'] }}"
      run_once: true
